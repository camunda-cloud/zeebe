name: "C8Run: release"
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "release branch of c8run to release (stable/8.7, main, etc.)"
        type: string
        required: true
        default: ""
      camundaVersion:
        description: "Camunda minor version in format x.y, x.y-rc, or alpha"
        type: string
        required: true
        default: ""
      camundaAppsRelease:
        description: "Name of the Camunda apps GH release"
        type: string
        required: true
        default: ""
      publishToCamundaAppsRelease:
        description: "Publish C8Run artifact to Camunda apps GH release too (by default C8Run has its own GH release)"
        type: boolean
        default: false

permissions:
  actions: read
  attestations: none
  checks: read
  contents: write
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: write

env:
  CAMUNDA_RUN_NAME: c8run-${{ inputs.camundaVersion }}

jobs:
  init:
    name: Create C8Run tag/release
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci NEXUS_USERNAME;
            secret/data/products/distribution/ci NEXUS_PASSWORD;

  release-posix:
    name: C8Run - ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.id }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # macos-latest is ARM, mac os 13 will execute on x86 runner.
        os:
          - name: Ubuntu (AMD64)
            id: ubuntu-latest
            artifactSuffix: linux-x86_64
          - name: MacOS (ARM64)
            id: macos-latest
            artifactSuffix: darwin-aarch64
          - name: MacOS (AMD64)
            id: macos-13
            artifactSuffix: darwin-x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci NEXUS_USERNAME;
            secret/data/products/distribution/ci NEXUS_PASSWORD;
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.1'
          cache: false  # disabling since not working anyways without a cache-dependency-path specified
      - name: Build c8run
        run: go build
        working-directory: ./c8run
      - name: make a package
        run: ./c8run package
        shell: bash
        working-directory: ./c8run
        env:
          JAVA_ARTIFACTS_USER: ${{ steps.secrets.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}
      # - name: Clean up old release
      #   env:
      #     GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      #   run: |
      #     gh release view ${{ env.CAMUNDA_RUN_NAME }} &&
      #       gh release delete ${{ env.CAMUNDA_RUN_NAME }} --cleanup-tag ||
      #       true
      #     # To avoid race condition when the release is created again.
      #     sleep 5
      # - name: Create new release
      #   run: |
      #     gh release create ${{ env.CAMUNDA_RUN_NAME }} --target ${{ inputs.branch }} --notes "${{ env.CAMUNDA_RUN_NAME }}"
      # env:
      #   GH_TOKEN: ${{ github.token }}
      - name: Copy artifact
        working-directory: ./c8run
        run: |
          cp -a camunda8-run-${{ inputs.camundaAppsRelease }}-${{ matrix.os.artifactSuffix }}.tar.gz \
            camunda8-run-${{ inputs.camundaVersion }}-${{ matrix.os.artifactSuffix }}.tar.gz
      - name: Upload artifact to C8Run release
        working-directory: ./c8run
        run: |
          gh release upload "${{ env.CAMUNDA_RUN_NAME }}" \
            camunda8-run-${{ inputs.camundaVersion }}-${{ matrix.os.artifactSuffix }}.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload artifact to Camuna apps release
        if: inputs.publishToCamundaAppsRelease
        working-directory: ./c8run
        run: |
          gh release upload "${{ inputs.camundaAppsRelease }}" \
            camunda8-run-${{ inputs.camundaAppsRelease }}-${{ matrix.os.artifactSuffix }}.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Add release URL to workflow summary
        run: |
          echo "⭐ Release URL: https://github.com/camunda/camunda/releases/tag/${{ inputs.camundaAppsRelease }}" >> $GITHUB_STEP_SUMMARY

  release-windows:
    name: C8Run - Windows (AMD64)
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/distribution/ci NEXUS_USERNAME;
            secret/data/products/distribution/ci NEXUS_PASSWORD;
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.1'
          cache: false  # disabling since not working anyways without a cache-dependency-path specified
      - name: Build c8run
        run: go build
        working-directory: .\c8run
      - name: make a package
        run: .\c8run.exe package
        working-directory: .\c8run
        env:
          GH_TOKEN: ${{ github.token }}
          JAVA_ARTIFACTS_USER: ${{ steps.secrets.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}
      # - name: Clean up old release
      #   env:
      #     GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      #   run: |
      #     gh release view ${{ env.CAMUNDA_RUN_NAME }} &&
      #       gh release delete ${{ env.CAMUNDA_RUN_NAME }} --cleanup-tag ||
      #       true
      #     # To avoid race condition when the release is created again.
      #     sleep 5
      # - name: Create new release
      #   run: |
      #     gh release create ${{ env.CAMUNDA_RUN_NAME }} --target ${{ inputs.branch }} --notes "${{ env.CAMUNDA_RUN_NAME }}"
      # env:
      #   GH_TOKEN: ${{ github.token }} 
      - name: Copy artifact
        shell: bash
        working-directory: .\c8run
        run: |
          cp -a camunda8-run-${{ inputs.camundaAppsRelease }}-windows-x86_64.zip \
            camunda8-run-${{ inputs.camundaVersion }}-windows-x86_64.zip
      - name: Upload artifact
        shell: bash
        working-directory: .\c8run
        run: |
          gh release upload "${{ env.CAMUNDA_RUN_NAME }}" \
            camunda8-run-${{ inputs.camundaVersion }}-windows-x86_64.zip
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload artifact to Camuna apps release
        if: inputs.publishToCamundaAppsRelease
        shell: bash
        working-directory: .\c8run
        run: |
          gh release upload "${{ inputs.camundaAppsRelease }}" \
            camunda8-run-${{ inputs.camundaAppsRelease }}-windows-x86_64.zip
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Add release URL to workflow summary
        shell: bash
        run: |
          echo "⭐ Release URL: https://github.com/camunda/camunda/releases/tag/${{ inputs.camundaAppsRelease }}" >> $GITHUB_STEP_SUMMARY
