name: C8 SaaS, c8Run & C8 Self-Managed With Helm Test Run

on:
  pull_request:

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

jobs:
  set-versions-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-versions-matrix.outputs.matrix }}
      cancel-run-tests: ${{ steps.set-versions-matrix.outputs.cancel-run-tests }}
      helm_dir: ${{ steps.set-versions-matrix.outputs.helm_dir }}
      values_file: ${{ steps.set-versions-matrix.outputs.values_file }}
      values_file_content: ${{ steps.set-versions-matrix.outputs.values_file_content }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Ensure file permissions
        run: chmod 644 .github/configs/camunda-platform-default-values.yml

      - name: Read JSON and set matrix based off of which folders have been changed
        id: set-versions-matrix
        env:
          DISTRO_QA_E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD }}
          DISTRO_QA_E2E_TESTS_IDENTITY_SECONDUSER_PASSWORD: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_SECONDUSER_PASSWORD }}
          DISTRO_QA_E2E_TESTS_IDENTITY_THIRDUSER_PASSWORD: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_THIRDUSER_PASSWORD }}
          DISTRO_QA_E2E_TESTS_KEYCLOAK_CLIENTS_SECRET: ${{ vars.DISTRO_QA_E2E_TESTS_KEYCLOAK_CLIENTS_SECRET }}
        run: |
          git fetch origin main
          echo "Setting matrix from JSON"
          changed_files=$(git diff --name-only origin/main ${{ github.sha }})
          changed_folders=$(echo "${changed_files}" | awk -F'/' '/^(tests|pages)\/[^/]+/{print $2}')

          if [ -z "${changed_folders}" ]; then
          echo "Matrix is empty. Skipping run-tests job."
          echo "cancel-run-tests=true" >> $GITHUB_OUTPUT
          echo "matrix=[]" >> $GITHUB_OUTPUT
          exit 0
          fi

          unique_folders=$(echo "${changed_folders}" | sort -u)
          json_string="{"
          for folder in ${unique_folders}; do
            json_string+="\"${folder}\": \"$(jq -r --arg folder "$folder" '.[$folder]' ./.github/c8_versions.json)\","
          done
          json_string="${json_string%,}" # Remove the trailing comma
          json_string+="}"

          echo "Unique Folders: ${unique_folders}"
          echo "JSON String: ${json_string}"

          echo "Setting matrix from JSON"
          MATRIX=$(jq -r 'to_entries|map(.value)|map("\"" + . + "\"")|join(",")' <<< "${json_string}")
          echo "Matrix: $MATRIX"
          echo "matrix=[$MATRIX]" >> $GITHUB_OUTPUT

          # Set helm_dir based on matrix values
          helm_dir=null
          if echo "$MATRIX" | grep -q "SM-8.7"; then
            helm_dir="camunda-platform-alpha"
          elif echo "$MATRIX" | grep -q "SM-8.6"; then
            helm_dir="camunda-platform-8.6"
          elif echo "$MATRIX" | grep -q "SM-8.5"; then
            helm_dir="camunda-platform-8.5"
          elif echo "$MATRIX" | grep -q "SM-8.4"; then
            helm_dir="camunda-platform-8.4"
          elif echo "$MATRIX" | grep -q "SM-8.3"; then
            helm_dir="camunda-platform-8.3"
          else
            helm_dir="default-helm-dir"
          fi
          echo "Helm Directory: $helm_dir"
          echo "helm_dir=$helm_dir" >> $GITHUB_OUTPUT

          if [ "$helm_dir" == "camunda-platform-alpha" ]; then
            values_file=".github/configs/camunda-platform-alpha-values.yml"
          else
            values_file=".github/configs/camunda-platform-default-values.yml"
          fi

          if [ -f "${values_file}" ]; then
            # Use envsubst to replace environment variables
            values_content=$(envsubst < "${values_file}")
            echo "Values:"
            echo "${values_content}"

            # Correctly handle multi-line content for `values_file_content` using GitHub Actions output
            echo "values_file_content<<EOF" >> $GITHUB_OUTPUT
            echo "${values_content}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "The values file does not exist."
            echo "values_file_content=null" >> $GITHUB_OUTPUT
          fi

          echo "cancel-run-tests=false" >> $GITHUB_OUTPUT

      - name: Debug Output Values
        run: |
          echo "Matrix Output: ${{ steps.set-versions-matrix.outputs.matrix }}"
          echo "Cancel Run Tests Output: ${{ steps.set-versions-matrix.outputs.cancel-run-tests }}"

      - name: Cancel run-tests job if matrix is empty
        if: needs.set-versions-matrix.outputs.cancel-run-tests == 'true'
        run: exit 0

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npx eslint . --ext .ts
  create-organization:
    runs-on: ubuntu-latest
    outputs:
      org_id: ${{ steps.extract_uuid.outputs.UUID }}
      org_name: ${{ steps.org_name.outputs.ORG_NAME }}
      org_token: ${{ steps.getAccessTokenRequest.outputs.response.access_token }}
    steps:
      - name: Generate Org Name
        id: org_name
        run: echo "::set-output name=ORG_NAME::$(openssl rand -hex 4)"
      - name: Get access token for console
        id: getAccessTokenRequest
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://weblogin.cloud.ultrawombat.com/oauth/token'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "grant_type":"client_credentials", 
              "audience":"cloud.ultrawombat.com", 
              "client_id":"${{secrets.EXTERNAL_CONSOLE_API_CLIENT_ID}}",
              "client_secret":"${{secrets.EXTERNAL_CONSOLE_API_CLIENT_SECRET}}"
            }
      - name: Set Token as Variable
        id: set_variable
        run: |
          echo "TOKEN=${{ fromJson(steps.getAccessTokenRequest.outputs.response).access_token }}" >> $GITHUB_ENV
      - name: Create Org
        id: createOrgRequest
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://accounts.cloud.ultrawombat.com/external/qa/organizations'
          method: 'POST'
          customHeaders: |
            {
              "Content-Type": "application/json",
              "Authorization": "Bearer ${{ env.TOKEN }}"
            }
          data: |
            {
              "name": "${{ steps.org_name.outputs.ORG_NAME }}",
              "salesPlanType": "enterprise",
              "users": [
                {
                  "roles": ["admin"],
                  "userId": "auth0|651417be5ab198160b91169d"
                },
                {
                  "roles": ["developer"],
                  "userId": "auth0|651e5204f40ba61b596ec6b7"
                },
                {
                "roles":["developer"],
                "userId":"auth0|671b3f8f2bd9170e2c9c5ade"
                }
              ]
            }
          timeout: 60000
      - name: Extract UUID from Response
        id: extract_uuid
        run: echo "::set-output name=UUID::$(echo '${{ steps.createOrgRequest.outputs.response }}' | jq -r '.data.org.uuid')"

      - name: Set UUID as Output
        run: echo "ORG_ID=${{ steps.extract_uuid.outputs.UUID }}" >> $GITHUB_ENV

  helm-deploy:
    name: Helm chart Integration Tests
    needs: [lint, set-versions-matrix]
    if: ${{ needs.set-versions-matrix.outputs.cancel-run-tests != 'true' && contains(needs.set-versions-matrix.outputs.matrix, 'SM') }}
    uses: camunda/camunda-platform-helm/.github/workflows/test-integration-template.yaml@main
    secrets: inherit
    with:
      infra-type: standard
      identifier: qa-e2e-${{ github.run_id }}
      camunda-helm-dir: ${{ needs.set-versions-matrix.outputs.helm_dir }}
      deployment-ttl: 1d
      test-enabled: true
      extra-values: |
        ${{ needs.set-versions-matrix.outputs.values_file_content }}

  build-c8run:
    name: Build C8 Run & Run C8 Run Tests
    needs: [lint, set-versions-matrix]
    if: ${{ needs.set-versions-matrix.outputs.cancel-run-tests != 'true' && contains(needs.set-versions-matrix.outputs.matrix, 'c8Run') }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.set-versions-matrix.outputs.matrix)}}
        project: ['chromium']
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/qa/ci/common NEXUS_USERNAME;
            secret/data/products/qa/ci/common NEXUS_PASSWORD;

      - name: Generate a GitHub token for camunda/camunda repo
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: GITHUB_APP_ID
          github-app-id-vault-path: secret/data/products/qa/ci/github.com/apps/camunda/quality-assurance-ci
          github-app-private-key-vault-key: GITHUB_APP_SECRET
          github-app-private-key-vault-path: secret/data/products/qa/ci/github.com/apps/camunda/quality-assurance-ci
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}
          owner: camunda
          repositories: camunda

      - name: disable and stop mono-xsp4.service
        run: |
          sudo systemctl stop mono-xsp4.service || true
          sudo systemctl disable mono-xsp4.service || true
          sudo killall mono || true
          sudo killall xsp4 || true

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Determine branch for Camunda repo
        id: determine-branch
        run: |
          if [[ "${{ matrix.version }}" == "c8Run-8.6" ]]; then
            echo "branch=stable/8.6" >> $GITHUB_ENV
          else
            echo "branch=main" >> $GITHUB_ENV
          fi

      - name: checkout camunda repo
        uses: actions/checkout@v4
        with:
          repository: camunda/camunda
          ref: ${{ env.branch }}
          path: camunda

      - name: print architecture
        run: arch

      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.1'
          cache: false # disabling since not working anyways without a cache-dependency-path specified

      - name: make a package
        run: ./package.sh
        working-directory: ./camunda/c8run
        env:
          GH_TOKEN: ${{ steps.github-token.outputs.token }}
          JAVA_ARTIFACTS_USER: ${{ steps.secrets.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}

      - name: Linux - Run c8run
        run: nohup ./start.sh --detached &
        working-directory: ./camunda/c8run
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-21-jdk-amd64
          JAVA_VERSION: 21.0.3

      - name: Sleep 2 mins
        run: sleep 120

      - name: Wait for camunda process to start
        run: bash -c 'while ! curl -s -f "http://localhost:9600/actuator/health"; do sleep 5; done'
        timeout-minutes: 5
      - name: Run tests
        uses: ./.github/actions/run-tests-c8Run
        with:
          version: ${{ matrix.version }}
          project: ${{ matrix.project }}
          c8run_connectors_api_url: ${{ secrets.C8RUN_CONNECTORS_API_URL }}
          testrail_qa_email: ${{ secrets.TESTRAIL_QA_EMAIL }}
          testrail_qa_key: ${{ secrets.TESTRAIL_QA_KEY }}

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: c8-run-logs
          path: ./camunda/c8run/log/*.log
          retention-days: 10

  run-tests:
    name: Run tests
    needs:
      [lint, set-versions-matrix, helm-deploy, create-organization, build-c8run]
    runs-on: 'gcp-core-32-longrunning-big-ssd'
    if: |
      always() &&
      needs.set-versions-matrix.outputs.cancel-run-tests == 'false' && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && !contains(needs.set-versions-matrix.outputs.matrix, 'c8Run')
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.set-versions-matrix.outputs.matrix)}}
        project: ['chromium']
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set PLAYWRIGHT_BASE_URL
        run: echo "BASE_URL=qa-e2e-${{ github.run_id }}" >> $GITHUB_ENV
      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          version: ${{ matrix.version }}
          project: ${{ matrix.project }}
          c8_username: ${{ secrets.C8_USERNAME }}
          c8_password: ${{ secrets.C8_PASSWORD }}
          c8_username_test: ${{ secrets.C8_USERNAME_TEST }}
          c8_password_test: ${{ secrets.C8_PASSWORD_TEST }}
          c8_username_test_2: ${{ secrets.C8_USERNAME_TEST_2 }}
          c8_password_test_2: ${{ secrets.C8_PASSWORD_TEST_2 }}
          c8_invalid_username: ${{ secrets.C8_INVALID_USERNAME }}
          testrail_qa_email: ${{ secrets.TESTRAIL_QA_EMAIL }}
          testrail_qa_key: ${{ secrets.TESTRAIL_QA_KEY }}
          sm_password: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD }}
          sm_password_second_user: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_SECONDUSER_PASSWORD }}
          sm_password_third_user: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_THIRDUSER_PASSWORD }}
          sm_client_secret: ${{ vars.DISTRO_QA_E2E_TESTS_KEYCLOAK_CLIENTS_SECRET }}
          cluster_endpoint: ${{ secrets.CLUSTER_ENDPOINT }}
          oauth_url: ${{ secrets.OAUTH_URL }}
          base_url: qa-e2e-${{ github.run_id }}
          org_name: ${{ needs.create-organization.outputs.org_name }}
          org_id: ${{ needs.create-organization.outputs.org_id }}
          mail_slurp_api_key: ${{ secrets.MAIL_SLURP_API_KEY }}
          regionSelection: ${{ secrets.REGION_SELECTION }}
          operateBaseUrl: ${{ secrets.OPERATE_BASE_URL }}
          tasklistBaseUrl: ${{ secrets.TASKLIST_BASE_URL }}
          zeebeRestUrl: ${{ secrets.ZEEBE_REST_URL }}
          external_console_api_client_id: ${{secrets.EXTERNAL_CONSOLE_API_CLIENT_ID}}
          external_console_api_client_secret: ${{secrets.EXTERNAL_CONSOLE_API_CLIENT_SECRET}}
  delete-organization:
    runs-on: ubuntu-latest
    needs: [create-organization, run-tests]
    if: always()
    steps:
      - name: Get access token for console
        id: getAccessTokenRequest
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://weblogin.cloud.ultrawombat.com/oauth/token'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: |
            {
              "grant_type":"client_credentials", 
              "audience":"cloud.ultrawombat.com", 
              "client_id":"${{secrets.EXTERNAL_CONSOLE_API_CLIENT_ID}}",
              "client_secret":"${{secrets.EXTERNAL_CONSOLE_API_CLIENT_SECRET}}"
            }
      - name: Set Token as Variable
        id: set_variable
        run: |
          echo "DELETE_ORG_TOKEN=${{ fromJson(steps.getAccessTokenRequest.outputs.response).access_token }}" >> $GITHUB_ENV
      - name: Delete Org
        id: deleteOrgRequest
        uses: fjogeleit/http-request-action@v1.14.0
        with:
          url: 'https://accounts.cloud.ultrawombat.com/external/qa/organizations/${{ needs.create-organization.outputs.org_id }}'
          method: 'DELETE'
          customHeaders: |
            {
              "Content-Type": "application/json",
              "Authorization": "Bearer ${{ env.DELETE_ORG_TOKEN }}"
            }
          data: |
            {
              "orgId": "${{ needs.create-organization.outputs.org_id }}"
            }
          timeout: 60000
