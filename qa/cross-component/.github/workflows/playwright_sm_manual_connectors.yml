name: C8 SM Connectors Specific Test Run

on:
  workflow_dispatch:
    inputs:
      helmRepositoryBranchName:
        description: 'Branch Name in the Helm Repository'
        required: true
      helmRepositoryDirName:
        description: 'Directory in the Helm Repository'
        required: true
      zeebeVersion:
        description: 'Zeebe Version'
        required: true
      tasklistVersion:
        description: 'Tasklist Version'
        required: true
      operateVersion:
        description: 'Operate Version'
        required: true
      webModelerVersion:
        description: 'Web Modeler Version'
        required: true
      consoleVersion:
        description: 'Console Version'
        required: false
      identityVersion:
        description: 'Identity Version'
        required: true
      connectorsVersion:
        description: 'Connectors Version'
        required: true
      optimizeVersion:
        description: 'Optimize Version'
        required: true

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

jobs:
  init:
    name: Template Helm chart values
    runs-on: ubuntu-latest
    outputs:
      values: ${{ steps.template.outputs.values }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Template values
        id: template
        uses: ./.github/actions/template-helm-chart-values
        with:
          E2E_TESTS_CAMUNDA_HELM_DIR: "${{ github.event.inputs.helmRepositoryDirName }}"
          E2E_TESTS_KEYCLOAK_CLIENTS_SECRET: "${{ vars.DISTRO_QA_E2E_TESTS_KEYCLOAK_CLIENTS_SECRET }}"
          E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD: "${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD }}"
          E2E_TESTS_IDENTITY_SECONDUSER_PASSWORD: "${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_SECONDUSER_PASSWORD }}"
          E2E_TESTS_IDENTITY_THIRDUSER_PASSWORD: "${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_THIRDUSER_PASSWORD }}"
          E2E_TESTS_IDENTITY_IMAGE_TAG: "${{ github.event.inputs.identityVersion }}"
          E2E_TESTS_CONNECTORS_IMAGE_TAG: "${{ github.event.inputs.connectorsVersion }}"
          E2E_TESTS_CONSOLE_IMAGE_TAG: "${{ github.event.inputs.consoleVersion }}"
          E2E_TESTS_OPERATE_IMAGE_TAG: "${{ github.event.inputs.operateVersion }}"
          E2E_TESTS_OPTIMIZE_IMAGE_TAG: "${{ github.event.inputs.optimizeVersion }}"
          E2E_TESTS_TASKLIST_IMAGE_TAG: "${{ github.event.inputs.tasklistVersion }}"
          E2E_TESTS_WEBMODELER_IMAGE_TAG: "${{ github.event.inputs.webModelerVersion }}"
          E2E_TESTS_ZEEBE_IMAGE_TAG: "${{ github.event.inputs.zeebeVersion }}"

  helm-deploy:
    needs: init
    name: Helm chart Integration Tests
    uses: camunda/camunda-platform-helm/.github/workflows/test-integration-template.yaml@main
    secrets: inherit
    with:
      infra-type: standard
      camunda-helm-git-ref: ${{ github.event.inputs.helmRepositoryBranchName }}
      identifier: qa-e2e-${{ github.run_id }}
      camunda-helm-dir: ${{ github.event.inputs.helmRepositoryDirName }}
      deployment-ttl: 1d
      test-enabled: true
      extra-values: |
        ${{ needs.init.outputs.values }}

  set-versions-matrix:
    runs-on: ubuntu-latest
    outputs:
      helm_dir: ${{ steps.set-helm-dir.outputs.helm_dir }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Read JSON and set Matrix
        id: set-helm-dir
        run: |
          helmRepositoryDirName="${{ github.event.inputs.helmRepositoryDirName }}"
          echo "helmRepositoryDirName=${helmRepositoryDirName}"
          
          helm_dir=null
          if [ "$helmRepositoryDirName" = "camunda-platform-alpha" ]; then
            helm_dir='["SM-8.7"]'
          elif [ "$helmRepositoryDirName" = "camunda-platform-8.6" ]; then
            helm_dir='["SM-8.6"]'
          elif [ "$helmRepositoryDirName" = "camunda-platform-8.5" ]; then
            helm_dir='["SM-8.5"]'
          elif [ "$helmRepositoryDirName" = "camunda-platform-8.4" ]; then
            helm_dir='["SM-8.4"]'
          elif [ "$helmRepositoryDirName" = "camunda-platform-8.3" ]; then
            helm_dir='["SM-8.3"]'
          else
            echo "Unknown helmRepositoryDirName: $helmRepositoryDirName"
            exit 1
          fi

          echo "Matrix: $helm_dir"
          echo "helm_dir=$helm_dir" >> $GITHUB_OUTPUT
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npx eslint . --ext .ts

  run-tests-sm-connectors:
    name: Run tests
    needs: [lint, set-versions-matrix, helm-deploy]
    runs-on: 'gcp-core-32-longrunning-big-ssd'
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.set-versions-matrix.outputs.helm_dir) }}
        project: ['chromium']
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Clear Playwright Cache
        run: rm -rf $HOME/.cache/ms-playwright
      - name: Set PLAYWRIGHT_BASE_URL
        run: echo "BASE_URL=qa-e2e-${{ github.run_id }}" >> $GITHUB_ENV
      - name: Run tests
        uses: ./.github/actions/run-tests-sm-connectors
        with:
          version: ${{ matrix.version }}
          project: ${{ matrix.project }}
          c8_username: ${{ secrets.C8_USERNAME }}
          c8_password: ${{ secrets.C8_PASSWORD }}
          c8_username_test: ${{ secrets.C8_USERNAME_TEST }}
          c8_password_test: ${{ secrets.C8_PASSWORD_TEST }}
          c8_invalid_username: ${{ secrets.C8_INVALID_USERNAME }}
          testrail_qa_email: ${{ secrets.TESTRAIL_QA_EMAIL }}
          testrail_qa_key: ${{ secrets.TESTRAIL_QA_KEY }}
          sm_password: ${{ vars.DISTRO_QA_E2E_TESTS_IDENTITY_FIRSTUSER_PASSWORD }}
          sm_client_secret: ${{ vars.DISTRO_QA_E2E_TESTS_KEYCLOAK_CLIENTS_SECRET }}
          cluster_endpoint: ${{ secrets.CLUSTER_ENDPOINT }}
          oauth_url: ${{ secrets.OAUTH_URL }}
          base_url: qa-e2e-${{ github.run_id }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
