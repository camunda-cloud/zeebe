name: Manual c8Run Test Run with Linux

on:
  workflow_dispatch:
    inputs:
      c8Version:
        description: 'c8Run Version'
        required: true

jobs:
  build_c8run:
    name: Build and run the C8Run package
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: ['${{ github.event.inputs.c8Version }}']
        project: ['chromium']
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/qa/ci/common NEXUS_USERNAME;
            secret/data/products/qa/ci/common NEXUS_PASSWORD;

      - name: Generate a GitHub token for camunda/camunda repo
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: GITHUB_APP_ID
          github-app-id-vault-path: secret/data/products/qa/ci/github.com/apps/camunda/quality-assurance-ci
          github-app-private-key-vault-key: GITHUB_APP_SECRET
          github-app-private-key-vault-path: secret/data/products/qa/ci/github.com/apps/camunda/quality-assurance-ci
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}
          owner: camunda
          repositories: camunda

      - name: disable and stop mono-xsp4.service
        run: |
          sudo systemctl stop mono-xsp4.service || true
          sudo systemctl disable mono-xsp4.service || true
          sudo killall mono || true
          sudo killall xsp4 || true

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Determine branch for Camunda repo
        id: determine-branch
        run: |
          if [[ "${{ github.event.inputs.c8Version }}" == "8.6" ]]; then
            echo "branch=stable/8.6" >> $GITHUB_ENV
          else
            echo "branch=main" >> $GITHUB_ENV
          fi

      - name: Check out Camunda repo
        uses: actions/checkout@v4
        with:
          repository: camunda/camunda
          ref: ${{ env.branch }}
          path: camunda

      - name: print architecture
        run: arch

      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.1'
          cache: false # disabling since not working anyways without a cache-dependency-path specified

      - name: make a package
        run: ./package.sh
        working-directory: ./camunda/c8run
        env:
          GH_TOKEN: ${{ steps.github-token.outputs.token }}
          JAVA_ARTIFACTS_USER: ${{ steps.secrets.outputs.NEXUS_USERNAME }}
          JAVA_ARTIFACTS_PASSWORD: ${{ steps.secrets.outputs.NEXUS_PASSWORD }}

      - name: Linux - Run c8run
        run: nohup ./start.sh --detached &
        working-directory: ./camunda/c8run
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-21-jdk-amd64
          JAVA_VERSION: 21.0.3

      - name: Sleep 2 mins
        run: sleep 120

      - name: Wait for camunda process to start
        run: bash -c 'while ! curl -s -f "http://localhost:9600/actuator/health"; do sleep 5; done'
        timeout-minutes: 5

      - name: Run tests
        uses: ./.github/actions/run-tests-c8Run-manual-linux
        with:
          version: ${{ matrix.version }}
          project: ${{ matrix.project }}
          c8run_connectors_api_url: ${{ secrets.C8RUN_CONNECTORS_API_URL }}
          testrail_qa_email: ${{ secrets.TESTRAIL_QA_EMAIL }}
          testrail_qa_key: ${{ secrets.TESTRAIL_QA_KEY }}

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: c8-run-logs
          path: ./camunda/c8run/log/*.log
          retention-days: 10
