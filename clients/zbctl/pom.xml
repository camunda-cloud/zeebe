<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.camunda</groupId>
    <artifactId>zeebe-parent</artifactId>
    <version>8.7.0-SNAPSHOT</version>
    <relativePath>../../parent/pom.xml</relativePath>
  </parent>

  <artifactId>zeebe-cli</artifactId>
  <packaging>jar</packaging>

  <name>Zeebe CLI</name>

  <properties>
    <version.picocli>4.7.6</version.picocli>
    <version.graalvm>0.10.3</version.graalvm>
    <version.graalsdk>24.1.1</version.graalsdk>
    <version.jsonb>2.4</version.jsonb>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>camunda-client-java</artifactId>
    </dependency>

    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>zbctl-util</artifactId>
    </dependency>

    <!-- Utilities -->
    <dependency>
      <groupId>org.agrona</groupId>
      <artifactId>agrona</artifactId>
    </dependency>

    <!-- CLI arguments/interface -->
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${version.picocli}</version>
    </dependency>

    <!-- Logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${version.slf4j}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- JSON serialization -->
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-jsonb</artifactId>
      <version>${version.jsonb}</version>
    </dependency>

    <!-- Annotation processors for JSON -->
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-jsonb-generator</artifactId>
      <version>${version.jsonb}</version>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>

    <!-- GraalVM packages to add substitutions or build-time features -->
    <dependency>
      <groupId>org.graalvm.sdk</groupId>
      <artifactId>graal-sdk</artifactId>
      <version>${version.graalsdk}</version>
      <scope>provided</scope>
    </dependency>

    <!-- General annotations -->
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>33.4.0-jre</version>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>info.picocli</groupId>
              <artifactId>picocli-codegen</artifactId>
              <version>${version.picocli}</version>
            </path>
            <path>
              <groupId>io.avaje</groupId>
              <artifactId>avaje-jsonb-generator</artifactId>
              <version>${version.jsonb}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <ignoredUnusedDeclaredDependencies>
            <!-- used at runtime as the logger binding -->
            <dependency>org.slf4j:slf4j-simple:jar</dependency>
            <!-- used for annotations and runtime features -->
            <dependency>io.avaje:avaje-jsonb-generator:jar</dependency>
            <dependency>org.graalvm.sdk:graal-sdk:jar</dependency>
          </ignoredUnusedDeclaredDependencies>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>native</id>

      <properties>
        <!-- by default, skip compressing the native executable; this will avoid requiring
             everyone to have it present on their own machines -->
        <skipUpx>true</skipUpx>
        <!-- set this to false in order to run tests inside a native executable; this can be very
             useful to detect reflection, resource ,or JNI issues -->
        <skipNativeTests>true</skipNativeTests>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.graalvm.buildtools</groupId>
          <artifactId>junit-platform-native</artifactId>
          <version>${version.graalvm}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <version>${version.graalvm}</version>
            <extensions>true</extensions>
            <configuration>
              <skipNativeTests>${skipNativeTests}</skipNativeTests>
              <mainClass>io.camunda.zeebe.zbctl.Application</mainClass>
              <imageName>${build.finalName}</imageName>
              <quickBuild>${quickly}</quickBuild>
              <metadataRepository>
                <enabled>true</enabled>
              </metadataRepository>
            </configuration>
            <executions>
              <execution>
                <id>build-native</id>
                <goals>
                  <goal>compile-no-fork</goal>
                </goals>
                <phase>package</phase>
              </execution>
              <execution>
                <id>test-native</id>
                <goals>
                  <goal>test</goal>
                </goals>
                <phase>test</phase>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>generate-config</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>java</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <mainClass>io.camunda.zeebe.zbctl.util.ReflectConfigGenerator</mainClass>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jvm</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.6.0</version>
            <executions>
              <execution>
                <goals>
                  <goal>shade</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <transformers>
                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                      <mainClass>io.camunda.zeebe.zbctl.Application</mainClass>
                    </transformer>
                  </transformers>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.skife.maven</groupId>
            <artifactId>really-executable-jar-maven-plugin</artifactId>
            <version>2.1.1</version>
            <configuration>
              <!-- name for a new binary executable -->
              <programFile>c8ctl-nojvm</programFile>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>really-executable-jar</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
